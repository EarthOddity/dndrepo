@page "/materials"
@inject IAcademicService AcademicService
@inject NavigationManager NavigationManager
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

<h3>Available Teaching Materials</h3>

<div class="materials-container">
    <OverviewMaterialsSaved Title="Available Materials" Materials="@teachingMaterials" SavingMethod="@ToggleSave" SavedMaterialIds="@savedMaterialIds" />

    <div class="bachelors-list">
        <h3>Available Bachelors</h3>
        @if (bachelors == null)
        {
            <p>Loading bachelors...</p>
        }
        else
        {
            @foreach (var bachelor in bachelors)
            {
                <div class="bachelor-item" @onclick="() => LoadSubjects(bachelor.id)">
                    <h4>@bachelor.programName</h4>
                </div>
            }
        }
        <div class="subjects-list">
            @if (selectedSubjects != null)
            {
                <h4>Subjects</h4>
                @foreach (var subject in selectedSubjects)
                {
                    <p>@subject.name</p>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<TeachingMaterial> teachingMaterials = new();
    private List<Bachelor> bachelors = new();
    private List<Subject> selectedSubjects = new();
    private HashSet<int> savedMaterialIds = new();
    private int? currentUserId;

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthState;
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                var idClaim = user.Claims.FirstOrDefault(c => c.Type == "id");
                if (idClaim != null && int.TryParse(idClaim.Value, out int userId))
                {
                    currentUserId = userId;
                    await LoadSavedMaterials();
                }
            }

            await LoadMaterials();
            await LoadBachelor();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in initialization: {ex.Message}");
        }
    }

    private async Task LoadMaterials()
    {
        teachingMaterials = (await AcademicService.GetAllMaterials()).ToList();
    }

    private async Task LoadSavedMaterials()
    {
        if (currentUserId.HasValue)
        {
            var savedMaterials = await AcademicService.GetSavedMaterialsByUserId(currentUserId.Value);
            savedMaterialIds = new HashSet<int>(savedMaterials.Select(m => m.id));
        }
    }

    private async Task ToggleSave(int materialId)
    {
        if (!currentUserId.HasValue)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            await AcademicService.ToggleSaveMaterial(currentUserId.Value, materialId);
            if (savedMaterialIds.Contains(materialId))
            {
                savedMaterialIds.Remove(materialId);
            }
            else
            {
                savedMaterialIds.Add(materialId);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling save state: {ex.Message}");
        }
    }

    private async Task LoadBachelor()
    {
        bachelors = (await AcademicService.GetAllBachelors()).ToList();
    }

    private async Task LoadSubjects(int bachelorId)
    {
        try
        {
            selectedSubjects = (await AcademicService.GetSubjectsByBachelorId(bachelorId)).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading subjects: {ex.Message}");
        }
    }
}

<style>
    .material-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        margin-bottom: 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .material-content {
        flex-grow: 1;
        cursor: pointer;
    }

    .heart-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px;
        color: #888;
        transition: color 0.3s ease;
    }

    .heart-button.saved {
        color: #ff4444;
    }

    .heart-button:hover {
        transform: scale(1.1);
    }
</style>