@page "/materials"
@inject IAcademicService AcademicService
@inject NavigationManager NavigationManager
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

<div class="study-buddy-container">
    <div class="content-grid">
        <div class="materials-section">
            <OverviewMaterialsSaved Title="Available Materials" Materials="@teachingMaterials"
                SavingMethod="@ToggleSave" SavedMaterialIds="@savedMaterialIds" />
        </div>

        <div class="bachelors-section">
            <h3>Available Bachelors</h3>
            @if (bachelors == null)
            {
                <p>Loading bachelors...</p>
            }
            else
            {
                <div class="bachelors-grid">
                    @foreach (var bachelor in bachelors)
                    {
                        <div class="material-card" @onclick="() => LoadSubjects(bachelor.id)">
                            <h4>@bachelor.programName</h4>
                        </div>
                    }
                </div>

                <div class="subjects-section">
                    @if (selectedSubjects != null)
                    {
                        <h4>Subjects</h4>
                        <div class="materials-grid">
                            @foreach (var subject in selectedSubjects)
                            {
                                <div class="material-card">
                                    <p>@subject.name</p>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
        <button class="create-button" @onclick="NavigateToCreate">
            <i class="fas fa-plus"></i> Create Material
        </button>
    </div>
</div>


@code {
    private List<TeachingMaterial> teachingMaterials = new();
    private List<Bachelor> bachelors = new();
    private List<Subject> selectedSubjects = new();
    private HashSet<int> savedMaterialIds = new();
    private int? currentUserId;

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = null!;

    private string error;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthState;
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                var idClaim = user.Claims.FirstOrDefault(c => c.Type == "id");
                if (idClaim != null && int.TryParse(idClaim.Value, out int userId))
                {
                    currentUserId = userId;
                    await LoadSavedMaterials();
                }
            }

            await LoadMaterials();
            await LoadBachelor();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in initialization: {ex.Message}");
        }
    }

    private async Task LoadMaterials()
    {
        teachingMaterials = (await AcademicService.GetAllMaterials()).ToList();
    }

    private async Task LoadSavedMaterials()
    {
        if (currentUserId.HasValue)
        {
            var savedMaterials = await AcademicService.GetSavedMaterialsByUserId(currentUserId.Value);
            savedMaterialIds = new HashSet<int>(savedMaterials.Select(m => m.id));
        }
    }

    private async Task ToggleSave(int materialId)
    {
        if (!currentUserId.HasValue)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            await AcademicService.ToggleSaveMaterial(currentUserId.Value, materialId);
            if (savedMaterialIds.Contains(materialId))
            {
                savedMaterialIds.Remove(materialId);
            }
            else
            {
                savedMaterialIds.Add(materialId);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling save state: {ex.Message}");
        }
    }

    private async Task LoadBachelor()
    {
        bachelors = (await AcademicService.GetAllBachelors()).ToList();
    }

    private async Task LoadSubjects(int bachelorId)
    {
        try
        {
            loading = true;
            error = null;
            selectedSubjects.Clear();

            var subjects = await AcademicService.GetSubjectsByBachelorId(bachelorId);
            selectedSubjects = subjects.ToList();

            if (!selectedSubjects.Any())
            {
                error = "No subjects found for this bachelor";
            }
        }
        catch (Exception ex)
        {
            error = "Error loading subjects";
            Console.WriteLine($"LoadSubjects error: {ex.Message}");
            selectedSubjects = new List<Subject>();
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/create-material");
    }
}


<style>
    .study-buddy-container {
        margin: 0 auto;
        padding: 20px;
        background-color: #0f172a;
        color: #e2e8f0;
    }

    .content-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .materials-section,
    .bachelors-section {
        background-color: #1e293b;
        padding: 20px;
        border-radius: 8px;
    }

    .bachelors-grid,
    .materials-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
        margin-top: 15px;
    }

    .material-card {
        background-color: #0f172a;
        padding: 15px;
        border-radius: 6px;
        cursor: pointer;
        transition: transform 0.2s ease;
    }

    .material-card:hover {
        transform: scale(1.02);
    }

    .create-button {
        margin-left: auto;
        background: linear-gradient(135deg, #71b3e5 0%, #013faa 100%);
        color: #e2e8f0;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .create-button:hover {
        background: linear-gradient(135deg, #53b5ff 0%, #002a74 100%);
        transform: scale(1.05);
    }

    .subjects-section {
        margin-top: 20px;
    }

    .heart-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px;
        font-size: 1.2rem;
        color: #e2e8f0;
        transition: all 0.3s ease;
    }

    .heart-button.saved {
        color: #ff4444;
    }

    .heart-button:hover {
        transform: scale(1.1);
    }
</style>