@page "/saved-materials"
@inject ITeachingMaterialService TeachingMaterialService
@inject IBachelorService BachelorService
@inject NavigationManager NavigationManager

<h3>My Saved Materials</h3>

<div class="materials-container">
    <div class="materials-list">
        <h4>Saved Materials</h4>
        @if (savedMaterials == null)
        {
            <p>Loading saved materials...</p>
        }
        else if (!savedMaterials.Any())
        {
            <p>No saved materials yet.</p>
        }
        else
        {
            @foreach (var material in savedMaterials)
            {
                <div class="material-item">
                    <div class="material-content" @onclick="() => NavigateToMaterial(material.id)">
                        <h4>@material.title</h4>
                        <p>@material.description</p>
                    </div>
                    <button class="heart-button saved" @onclick="() => UnsaveMaterial(material.id)">
                        <i class="fas fa-heart"></i>
                    </button>
                </div>
            }
        }
    </div>

    <div class="subjects-list">
        <h4>My Subjects</h4>
        @if (userSubjects == null)
        {
            <p>Loading subjects...</p>
        }
        else if (!userSubjects.Any())
        {
            <p>No subjects found for your bachelor program.</p>
        }
        else
        {
            @foreach (var subject in userSubjects)
            {
                <div class="subject-item" @onclick="() => NavigateToSubjectMaterials(subject.id)">
                    <h4>@subject.name</h4>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<TeachingMaterial> savedMaterials;
    private List<Subject> userSubjects;
    private readonly int currentUserId = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadSavedMaterials();
        
        var userBachelor = await BachelorService.GetBachelorByStudentId(currentUserId);
        if (userBachelor != null)
        {
            userSubjects = (await BachelorService.GetSubjectsByBachelorId(userBachelor.id)).ToList();
        }
    }

    private async Task LoadSavedMaterials()
    {
        savedMaterials = (await TeachingMaterialService.GetSavedMaterialsByUserId(currentUserId)).ToList();
    }

    private async Task UnsaveMaterial(int materialId)
    {
        var success = await TeachingMaterialService.UnsaveMaterialForUser(currentUserId, materialId);
        if (success)
        {
            await LoadSavedMaterials();
            StateHasChanged();
        }
    }

    private void NavigateToMaterial(int materialId)
    {
        NavigationManager.NavigateTo($"/material/{materialId}");
    }

    private void NavigateToSubjectMaterials(int subjectId)
    {
        NavigationManager.NavigateTo($"/subject-materials/{subjectId}");
    }
}

<style>
    .materials-container {
        display: flex;
        gap: 2rem;
    }

    .materials-list, .subjects-list {
        flex: 1;
    }

    .material-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        margin-bottom: 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .material-content {
        flex-grow: 1;
        cursor: pointer;
    }

    .heart-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px;
        color: #888;
        transition: color 0.3s ease;
    }

    .heart-button.saved {
        color: #ff4444;
    }

    .heart-button:hover {
        transform: scale(1.1);
    }

    .subject-item {
        cursor: pointer;
        padding: 1rem;
        margin-bottom: 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .subject-item:hover {
        background-color: #f5f5f5;
    }
</style>