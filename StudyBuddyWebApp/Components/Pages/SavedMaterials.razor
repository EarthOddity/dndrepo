@page "/saved-materials"
@inject IAcademicService AcademicService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<h3>My Saved Materials</h3>

@if (error != null)
{
    <div class="alert alert-danger">@error</div>
}

@if (loading)
{
    <p>Loading...</p>
}
else
{
    <OverviewMaterialsSaved Title="Saved Materials" Materials="@savedMaterials"
        SavingMethod="EventCallback.Factory.Create<int>(this, ToggleSaveMaterial)" SavedMaterialIds="@savedMaterialIds" />

    <div class="subjects-list">
        <h4>My Subjects</h4>
        @if (userSubjects == null)
        {
            <p>Loading subjects...</p>
        }
        else if (!userSubjects.Any())
        {
            <p>No subjects found for your bachelor program.</p>
        }
        else
        {
            @foreach (var subject in userSubjects)
            {
                <div class="subject-item" @onclick="() => NavigateToSubjectMaterials(subject.Id)">
                    <h4>@subject.Name</h4>
                </div>
            }
        }
    </div>
}

@code {
    private List<TeachingMaterial> savedMaterials = new();
    private List<Subject> userSubjects = new();
    private HashSet<int> savedMaterialIds = new();
    private int? currentUserId;
    private bool loading = true;
    private string error;

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            var authState = await AuthState;
            var user = authState.User;

            if (!user.Identity?.IsAuthenticated ?? false)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            var idClaim = user.Claims.FirstOrDefault(c => c.Type == "id");
            if (idClaim == null || !int.TryParse(idClaim.Value, out int userId))
            {
                error = "User ID not found";
                return;
            }

            currentUserId = userId;
            await LoadUserData();
        }
        catch (Exception ex)
        {
            error = $"Error loading saved materials: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadUserData()
    {
        if (!currentUserId.HasValue) return;

        try
        {
            savedMaterials = (await AcademicService.GetSavedMaterialsByUserId(currentUserId.Value)).ToList();
            savedMaterialIds = new HashSet<int>(savedMaterials.Select(m => m.Id));

            var userBachelor = await AcademicService.GetBachelorByStudentId(currentUserId.Value);
            if (userBachelor != null)
            {
                userSubjects = (await AcademicService.GetSubjectsByBachelorId(userBachelor.Id)).ToList();
            }
            else
            {
                Console.WriteLine("No bachelor found for user");
                userSubjects = new List<Subject>();
            }
        }
        catch (Exception ex)
        {
            error = $"Error loading user data: {ex.Message}";
            Console.WriteLine($"LoadUserData error: {ex.Message}");
            savedMaterials = new List<TeachingMaterial>();
            userSubjects = new List<Subject>();
        }
    }

    private async Task ToggleSaveMaterial(int materialId)
    {
        if (!currentUserId.HasValue)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            var success = await AcademicService.ToggleSaveMaterial(currentUserId.Value, materialId);
            if (success)
            {
                await LoadUserData();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            error = $"Error toggling save state: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void NavigateToSubjectMaterials(int subjectId)
    {
        NavigationManager.NavigateTo($"/subject-materials/{subjectId}");
    }
}

<style>
    .materials-container {
        display: flex;
        gap: 2rem;
    }

    .materials-list,
    .subjects-list {
        flex: 1;
    }

    .material-item .subject-item {
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        margin-bottom: 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .material-content {
        flex-grow: 1;
        cursor: pointer;
    }

    .heart-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px;
        color: #888;
        transition: color 0.3s ease;
    }

    .heart-button.saved {
        color: #ff4444;
    }

    .heart-button:hover {
        transform: scale(1.1);
    }

    .subject-item:hover {
        background-color: #f5f5f5;
    }
</style>