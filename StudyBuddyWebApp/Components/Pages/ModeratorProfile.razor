@page "/moderator-profile"
@inject IProfileService ProfileService
@using System.Security.Claims
@using StudyBuddyWebApp.Components.Layout
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer
@attribute [Authorize("MustBeModerator")]

<h3>Moderator Profile</h3>

@if (moderator == null)
{
        <p>Loading...</p>
}
else
{
         <EditForm Model="moderator" OnValidSubmit="SaveChanges" FormName="ModeratorProfileForm">
            <DataAnnotationsValidator />

            <!-- Read-only and Editable Fields -->
            <div>
                <label>First Name:</label>
            @if (isEditing)
            {
                        <InputText @bind-Value="moderator.name" class="form-control" />
            }
            else
            {
                        <span>@moderator.name</span>
            }
            </div>

            <div>
                <label>Surname:</label>
            @if (isEditing)
            {
                        <InputText @bind-Value="moderator.surname" class="form-control" />
            }
            else
            {
                        <span>@moderator.surname</span>
            }
            </div>

            <div>
                <label>Email:</label>
            @if (isEditing)
            {
                        <InputText @bind-Value="moderator.email" class="form-control" />
            }
            else
            {
                        <span>@moderator.email</span>
            }
            </div>

            <div>
                <label>Phone Number:</label>
            @if (isEditing)
            {
                        <InputNumber @bind-Value="moderator.phoneNumber" class="form-control" />
            }
            else
            {
                        <span>@moderator.phoneNumber</span>
            }
            </div>

            <!-- Buttons -->
        @if (isEditing)
        {
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                    <button type="button" @onclick="CancelEdit" class="btn btn-secondary">Cancel</button>
        }
        else
        {
                    <button type="button" @onclick="EnableEditMode" class="btn btn-warning">Edit</button>
                    <button type="button" @onclick="DeleteProfile" class="btn btn-danger">Delete Profile</button>
        }
        </EditForm>
}

@code {
    private Moderator? moderator = null;

    private bool isEditing = false;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private int id;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;

    @* protected override async Task OnInitializedAsync()
    {
        moderator = await ProfileService.GetModeratorProfile(1);
    } *@
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;

        var role = user.Claims.FirstOrDefault(c => c.Type == "role")?.Value;
        Console.WriteLine($"User is authenticated with role: {role}");

        if (!isLoggedIn) return;
        userClaims = user.Claims;
        id = int.Parse(user.Claims.First(claim => claim.Type.Equals("id")).Value);
        Console.WriteLine("Id is : " + id);


        moderator = await ProfileService.GetModeratorProfile(id);


    }

    private void EnableEditMode()
    {
        isEditing = true;
    }

    private async Task SaveChanges()
    {
        await ProfileService.UpdateModeratorProfile(1, moderator);
        moderator = await ProfileService.GetModeratorProfile(1); // Reload the updated data
        isEditing = false;
    }
    private void CancelEdit()
    {
        isEditing = false; // Exit edit mode without saving
    }
    private async Task DeleteProfile()
    {
        await ProfileService.DeleteModeratorProfile(1);
        moderator = null;
    }
}