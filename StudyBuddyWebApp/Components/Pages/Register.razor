@page "/register"
@inject IAuthService authService
@inject NavigationManager navMgr
@inject IAcademicService AcademicService
@rendermode InteractiveServer

<h3>Register</h3>
<h5>Please introduce the requiered information</h5>

<EditForm Model="newStudent" OnValidSubmit="RegisterStudent">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="name">First Name</label>
        <InputText id="name" @bind-Value="newStudent.Name" class="form-control" />
        <ValidationMessage For="@(() => newStudent.Name)" />
    </div>

    <div class="form-group">
        <label for="surname">Last Name</label>
        <InputText id="surname" @bind-Value="newStudent.Surname" class="form-control" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="newStudent.Email" class="form-control" />
    </div>

    <div class="form-group">
        <label for="phoneNumber">Phone Number</label>
        <InputNumber id="phoneNumber" @bind-Value="newStudent.PhoneNumber" class="form-control" />
    </div>

    <div class="form-group">
        <label for="language">Language</label>
        <InputText id="language" @bind-Value="newStudent.Language" class="form-control" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="newStudent.Password" class="form-control" type="password" />
    </div>

    <div class="form-group">
        <label for="isTutor">Are you a tutor?</label>
        <InputCheckbox id="isTutor" @bind-Value="newStudent.IsTutor" class="form-check-input" />
    </div>
    <div class="form-group">
        <label for="bachelor">Bachelor Program</label>
        <InputSelect id="bachelor" @bind-Value="newStudent.BachelorId" class="form-control">
            <option value="0">Select a Bachelor Program</option>
            @if (bachelors != null)
            {
                @foreach (var bachelor in bachelors)
                {
                    <option value="@bachelor.Id">@bachelor.ProgramName</option>
                }
            }
        </InputSelect>
    </div>


    <button type="submit" class="btn btn-primary">Register</button>
    <button type="button" class="btn btn-secondary" @onclick="GoToLogin">Already have an account?</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
@if (showModal)
{
    <div class="modal"
        style="display:block; position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5); z-index:1000;">
        <div class="modal-dialog"
            style="background:white; margin:15% auto; padding:20px; max-width:400px; text-align:center; border-radius:10px;">
            <h4>Registration Successful!</h4>
            <p>Your student ID is <strong>@generatedId</strong>.</p>
            <p>Going top log in page in <strong>@countdown</strong> seconds...</p>


        </div>
    </div>
}
@code {
    private Student newStudent = new Student();
    private string? errorMessage;
    private int generatedId;
    private bool showModal = false;
    private int countdown = 5; // Seconds before redirect
    private List<Bachelor> bachelors;
    private int selectedBachelorId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            bachelors = (await AcademicService.GetAllBachelors()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load bachelor programs";
            Console.WriteLine($"Error loading bachelors: {ex.Message}");
        }
    }
    private async Task RegisterStudent()
    {
        try
        {

            var registeredStudent = await authService.RegisterStudentAsync(newStudent);
            generatedId = registeredStudent.Id;
            // Show the success modal
            showModal = true;
            StartCountdown();
            // Clear the form
            newStudent = new Student();
            //navMgr.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            // Display the error message
            errorMessage = ex.Message;
        }
    }
    private async Task StartCountdown()
    {
        while (countdown > 0)
        {
            await Task.Delay(1000); // Wait for 1 second
            countdown--;
            StateHasChanged(); // Trigger UI update
        }

        GoToLogin();
    }

    private void GoToLogin()
    {
        showModal = false; // Hide the modal
        navMgr.NavigateTo("/login");
    }
    private void RedirectToProfile()
    {
        navMgr.NavigateTo("/user-profile");
    }
}