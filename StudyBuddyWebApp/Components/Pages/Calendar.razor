@page "/calendar"
@inject ICalendarService ICalendarService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IProfileService ProfileService
@rendermode InteractiveServer
@using StudyBuddyWebApp.Components


<h2>Calendar</h2>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
<div class="button-container">
    <button class="create-event-button" @onclick="NavigateToCreateEvent">Create A New Event</button>
</div>
<div class="week-calendar">
    <div class="calendar-header">
        <button class="nav-button" @onclick="PreviousWeek">❮</button>
        <span class="week-title">@GetWeekTitle()</span>
        <button class="nav-button" @onclick="NextWeek">❯</button>
    </div>

    <div class="week-grid">
        <div class="time-labels">
            @for (int hour = 0; hour < 24; hour++)
            {
                <div class="hour-label">@hour:00</div>
            }
        </div>
        <div class="days-container">
            @for (int i = 0; i < 7; i++)
            {
                <CalendarDay Day="@currentWeek.AddDays(i)" Events="GetDayEvents(currentWeek.AddDays(i))"
                    OnEventEdit="NavigateToEventDetails" />
            }
        </div>
    </div>
</div>

@code {
    private DateTime currentWeek = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
    private SBCalendar currentCalendar;
    private string errorMessage;
    @* private int userId; *@
    private int userId = 1;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            userId = int.Parse(user.Claims.First(claim => claim.Type.Equals("id")).Value);
            // Load the calendar for the user
            currentCalendar = await ICalendarService.GetCalendarByUserId(userId);
        }
        else
        {
            errorMessage = "User is not authenticated.";
        }
    }


    private string GetWeekTitle()
    {
        return $"{currentWeek:MMM dd} - {currentWeek.AddDays(6):MMM dd, yyyy}";
    }
    private async Task PreviousWeek()
    {
        currentWeek = currentWeek.AddDays(-7);
        currentCalendar = await ICalendarService.GetCalendarByUserId(userId);
        StateHasChanged();
    }

    private async Task NextWeek()
    {
        currentWeek = currentWeek.AddDays(7);
        currentCalendar = await ICalendarService.GetCalendarByUserId(userId);
        StateHasChanged();
    }

    private async Task NavigateToCreateEvent()
    {
        if (currentCalendar != null)
        {
            NavigationManager.NavigateTo("/event/0");
        }
        else
        {
            errorMessage = "Unable to create event. Calendar not loaded.";
            StateHasChanged();
        }
    }

    private List<SBEvent> GetDayEvents(DateTime day)
    {
        return currentCalendar?.EventList.Where(e => e.StartTime.Date == day.Date).ToList() ?? new List<SBEvent>();
    }

    private void NavigateToEventDetails(int eventId)
    {
        var eventExists = currentCalendar?.EventList.Any(e => e.Id == eventId) ?? false;
        if (eventExists)
        {
            NavigationManager.NavigateTo($"/event/{eventId}");
        }
        else
        {
            errorMessage = "Event does not exist.";
            StateHasChanged();
        }
    }
}

<style>
    h2 {
        font-size: 1.5em;
        margin-left: 20px;
    }

    .week-calendar {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f4f7f9;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        margin: 20px;
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background-color: #ffffff;
        border-bottom: 1px solid #e0e6ed;
    }

    .nav-button {
        background: none;
        border: none;
        color: #4a5568;
        font-size: 1.5em;
        cursor: pointer;
        transition: color 0.3s ease;
    }

    .nav-button:hover {
        color: #3182ce;
    }

    .week-title {
        font-size: 1.2em;
        font-weight: 600;
        color: #2d3748;
    }

    .week-grid {
        display: grid;
        grid-template-columns: 70px 1fr;
        height: calc(100vh - 70px);
        background-color: #f4f7f9;
        padding: 20px;
    }

    .time-labels {
        width: 100%;
        background-color: #ffffff;
        border-right: 1px solid #e0e6ed;
        padding-top: 20px;
    }

    .hour-label {
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: flex-end;
        padding-right: 15px;
        font-size: 0.9em;
        color: #202833;
        !important
    }

    .days-container {
        display: flex;
        flex-grow: 1;
        overflow-x: auto;
    }

    .button-container {
        display: flex;
        justify-content: flex-end;
        width: 100%;
        padding: 10px;
    }

    .create-event-button {
        background: linear-gradient(135deg, #71b3e5 0%, #013faa 100%);
        color: #000000;
        border: none;
        text-align: center;
        padding: 10px 15px;
        cursor: pointer;
        margin-right: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: background 0.3s ease, transform 0.2s ease;
    }

    .create-event-button:hover {
        background: linear-gradient(135deg, #53b5ff 0%, #002a74 100%);
        transform: scale(1.05);
    }
</style>