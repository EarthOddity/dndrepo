@* @page "/calendar/{calendarId:int}"
@using System.Globalization
@using StudyBuddyWebApp.Components
@inject ICalendarService eventService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@using System.Security.Claims

@attribute [Authorize("MustBeStudent")]

<div class="calendar-container">
    <section class="introduction">
        <h2>Calendar</h2>
        <p>View and manage your upcoming events for the week.</p>
    </section>

    <main class="calendar-grid">
        <div class="calendar-section">
            <h3>Upcoming Events</h3>
            <div class="calendar-week">
                @foreach (var day in GetDaysInCurrentWeek())
                {
                    <CalendarDay Day="day" Events="GetEventsForDay(day)" CalendarId="calendarId" />
                }
            </div>
            <div class="button-container">
                <button class="create-event-button" @onclick="CreateEvent">Create A New Event</button>
            </div>
        </div>
    </main>
</div>

@code {
        [CascadingParameter]
        public Task<AuthenticationState> AuthState { get; set; } = null!;

        [Parameter]
        public int calendarId { get; set; }

private bool isLoggedIn;
    private List<SBEvent> events = [];

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            isLoggedIn = true;
            try
            {
                events = (await eventService.GetEventsByCalendarId(calendarId)).ToList();
        }
        catch (Exception ex)
        {
        Console.WriteLine($"Error loading events: {ex.Message}");
        }
        }
        else
        {
        isLoggedIn = false;
        }
        }

        private List<DateTime> GetDaysInCurrentWeek()
            {
            var daysInWeek = new List<DateTime>();
                var currentDate = DateTime.Now;
                var diff = currentDate.DayOfWeek - DayOfWeek.Monday;
                var startOfWeek = currentDate.AddDays(-diff).Date;

                for (int i = 0; i < 7; i++) { daysInWeek.Add(startOfWeek.AddDays(i)); } return daysInWeek; } private
                    List<SBEvent> GetEventsForDay(DateTime day)
                    {
                    return events.Where(e => e.StartTime.Date == day.Date).ToList();
                    }

                    private void CreateEvent()
                    {
                    NavigationManager.NavigateTo($"/calendar/{calendarId}/event");
                    }

                    }

                    <style>
                        .calendar-container {
                            margin: 0 auto;
                            padding: 20px;
                            color: #e2e8f0;
                        }

                        .introduction {
                            background-color: #1e293b;
                            padding: 20px;
                            border-radius: 8px;
                            margin: 30px 0;
                        }

                        .calendar-grid {
                            display: grid;
                            grid-template-columns: 1fr;
                            gap: 20px;
                        }

                        .calendar-section {
                            background-color: #1e293b;
                            padding: 20px;
                            border-radius: 8px;
                            min-height: fit-content;
                        }

                        .calendar-week {
                            display: grid;
                            grid-template-columns: repeat(7, 1fr);
                            grid-gap: 5px;
                            margin-top: 20px;
                        }

                        .button-container {
                            display: flex;
                            justify-content: flex-end;
                            width: 100%;
                            padding: 10px;
                        }

                        .create-event-button {
                            background: linear-gradient(135deg, #71b3e5 0%, #013faa 100%);
                            color: #000000;
                            border: none;
                            text-align: center;
                            padding: 10px 15px;
                            cursor: pointer;
                            border-radius: 8px;
                            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                            transition: background 0.3s ease, transform 0.2s ease;
                        }

                        .create-event-button:hover {
                            background: linear-gradient(135deg, #53b5ff 0%, #002a74 100%);
                            transform: scale(1.05);
                        }
                    </style> *@