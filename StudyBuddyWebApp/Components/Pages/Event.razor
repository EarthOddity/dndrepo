@page "/event/{id:int}"
@inject ICalendarService CalendarService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Event Details</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@if (eventDetails == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="eventDetails" OnValidSubmit="SaveEvent">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Title:</label>
            <InputText @bind-Value="eventDetails.Title" class="form-control" />
        </div>
        <div>
            <label>Description:</label>
            <InputTextArea @bind-Value="eventDetails.Description" class="form-control" />
        </div>
        <div>
            <label>Start Time:</label>
            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="eventDetails.StartTime" class="form-control" />
        </div>
        <div>
            <label>End Time:</label>
            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="eventDetails.EndTime" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>

        @if (Id != 0)
        {
            <button type="button" class="btn btn-secondary" @onclick="UpdateEvent">Update</button>
            <button type="button" class="btn btn-danger" @onclick="DeleteEvent">Delete</button>
        }
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private SBEvent eventDetails;
    private List<SBEvent> allEvents = new List<SBEvent>();
    private string errorMessage;
    private string successMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            int userId = int.Parse(user.Claims.First(claim => claim.Type.Equals("id")).Value);
            var userCalendar = await CalendarService.GetCalendarByUserId(userId);
            allEvents = userCalendar?.EventList ?? new List<SBEvent>();

            if (Id != 0)
            {
                eventDetails = allEvents.FirstOrDefault(e => e.Id == Id) ?? new SBEvent();
            }
            else
            {
                eventDetails = new SBEvent(); // Initialize for new event
            }
        }
        else
        {
            errorMessage = "User is not authenticated.";
        }
    }

    private async Task SaveEvent()
    {
        try
        {
            if (eventDetails.Id == 0)
            {
                // Add new event to the calendar
                var newEvent = await CalendarService.CreateEvent(eventDetails);
                await CalendarService.AddEventToCalendar(1, newEvent); // Assuming calendar ID is 1 for simplicity
            }
            else
            {
                // Update existing event in the calendar
                await CalendarService.UpdateEvent(eventDetails);
            }

            successMessage = "Event saved successfully!";
            await Task.Delay(1500);
            NavigationManager.NavigateTo("/calendar");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to save event: {ex.Message}. Please try again.";
        }
    }

    private async Task UpdateEvent()
    {
        try
        {
            // Update existing event in the calendar
            await CalendarService.UpdateEvent(eventDetails);

            successMessage = "Event updated successfully!";
            await Task.Delay(1500);
            NavigationManager.NavigateTo("/calendar");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update event: {ex.Message}. Please try again.";
        }
    }

    private async Task DeleteEvent()
    {
        try
        {
            await CalendarService.DeleteEvent(eventDetails.Id);
            successMessage = "Event deleted successfully!";
            await Task.Delay(1500);
            NavigationManager.NavigateTo("/calendar");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete event: {ex.Message}. Please try again.";
        }
    }
}

<style>
    .form-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-container h3 {
        text-align: center;
        margin-bottom: 20px;
    }

    .form-container .form-control {
        margin-bottom: 15px;
    }

    .form-container .btn {
        margin-right: 10px;
    }

    .alert {
        margin-top: 20px;
    }
</style>