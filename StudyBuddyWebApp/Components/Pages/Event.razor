@page "/calendar/{calendarId:int}/event/{eventId:int?}"
@inject NavigationManager NavigationManager
@inject ICalendarService EventService
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Web

<div>
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }
    <EditForm Model="@newEvent" OnValidSubmit="CreateOrUpdateEvent">
        <DataAnnotationsValidator />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <div class="event-creation-container">
            <h2>@(eventId.HasValue ? "Edit Event" : "Create A New Event")</h2>

            <div class="form-group">
                <label for="EventTitle">Event Title</label>
                <InputText id="EventTitle" class="form-control" @bind-Value="newEvent.Title" />
            </div>

            <div class="form-group">
                <label for="EventDescription">Event Description</label>
                <InputTextArea id="EventDescription" class="form-control" @bind-Value="newEvent.Description" />
            </div>

            <div class="form-group">
                <label for="EventStartDate">Start Date</label>
                <InputDate id="EventStartDate" class="form-control" @bind-Value="newEvent.StartTime" />
            </div>

            <div class="form-group">
                <input type="time" id="EventStartTime" class="form-control" @bind="newEvent.StartTime" />
            </div>

            <div class="form-group">
                <label for="EventEndDate">End Date</label>
                <InputDate id="EventEndDate" class="form-control" @bind-Value="newEvent.EndTime" />
            </div>

            <div class="form-group">
                <label for="EventEndTime">End Time</label>
                <input type="time" id="EventEndTime" class="form-control" @bind="newEvent.EndTime" />
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary">@((eventId.HasValue) ? "Update" : "Create") Event</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public int calendarId { get; set; }
    [Parameter] public int? eventId { get; set; } // optional eventId for editing
    private SBEvent newEvent = new SBEvent();
    private string errorMessage = "";
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (eventId.HasValue)
        {
            newEvent = await EventService.GetEventById(eventId.Value);
            if (newEvent == null)
            {
                errorMessage = "Event not found!";
            }
        }
        else
        {
            newEvent.CalendarId = calendarId;
        }
    }

    private async Task CreateOrUpdateEvent()
    {
        try
        {
            if (eventId.HasValue)
            {
                // Update the existing event
                await EventService.UpdateEvent(newEvent);
                successMessage = "Event updated successfully!";
            }
            else
            {
                // Create a new event
                await EventService.CreateEvent(newEvent);
                successMessage = "Event created successfully!";
            }

            StateHasChanged();

            // Wait 2 seconds before redirecting
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}

<style>
    .event-creation-container {
        background-color: #1e293b;
        padding: 20px;
        border-radius: 8px;
        color: #e2e8f0;
        margin: 20px 0;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        font-weight: 600;
        color: #f0f0f0;
    }

    .form-group .form-control {
        background-color: #0f172a;
        color: #e2e8f0;
        border: 1px solid #4b5563;
        border-radius: 5px;
        padding: 10px;
        width: 100%;
        box-sizing: border-box;
    }

    .form-group .form-control:focus {
        border-color: #71b3e5;
        outline: none;
    }

    .form-actions {
        margin-top: 20px;
        display: flex;
        justify-content: space-between;
    }

    .form-actions button {
        padding: 10px 20px;
        border-radius: 8px;
        transition: transform 0.2s ease;
    }

    .form-actions .btn-primary {
        background-color: #53b5ff;
        border: none;
        color: #0f172a;
        font-weight: bold;
    }

    .form-actions .btn-primary:hover {
        transform: scale(1.05);
    }

    .form-actions .btn-secondary {
        background-color: #6c757d;
        color: #ffffff;
    }

    .form-actions .btn-secondary:hover {
        background-color: #5a6268;
    }

    .alert {
        margin-bottom: 15px;
    }
</style>
