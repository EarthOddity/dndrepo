@page "/calendar/{calendarId:int}/event"
@inject NavigationManager NavigationManager
@inject ICalendarService EventService
@rendermode InteractiveServer
<div>
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }
    <EditForm Model="@newEvent" OnValidSubmit="CreateNewEvent">
        <DataAnnotationsValidator />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }


        <div class="event-creation-container">
            <h2>Create A New Event</h2>

            <div class="form-group">
                <label>Title</label>
                <InputText @bind-Value="newEvent.Title" class="form-control" />
                <ValidationMessage For="@(() => newEvent.Title)" />
            </div>

            <div class="form-group">
                <label>Description</label>
                <InputTextArea @bind-Value="newEvent.Description" class="form-control" />
            </div>

            <div class="form-group">
                <label>Start Time</label>
                <InputDate TValue="DateTime" @bind-Value="newEvent.StartTime" class="form-control" />
                <ValidationMessage For="@(() => newEvent.StartTime)" />
            </div>

            <div class="form-group">
                <label>End Time</label>
                <InputDate TValue="DateTime" @bind-Value="newEvent.EndTime" class="form-control" />
                <ValidationMessage For="@(() => newEvent.EndTime)" />
            </div>

            @* still need to incorporate adding a tutor *@

            <div class="form-actions">
                <button type="submit" class="btn btn-primary">Create Event</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </EditForm>

    <div class="event-item" style="background-color: @GetEventColor()">
        <div class="event-title">@newEvent.Title</div>
        <div class="event-time">
            @newEvent.StartTime.ToString("HH:mm") - @newEvent.EndTime.ToString("HH:mm")
        </div>
    </div>



</div>


@code {
    [Parameter] public int calendarId { get; set; }
    private SBEvent newEvent = new SBEvent();
    private int selectedTutorId;
    private string errorMessage = "";
    private List<Student> Tutors = new();
    private string successMessage = string.Empty;


    @*     protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (DateTime.TryParse(query["date"], out DateTime selectedDate) &&
        int.TryParse(query["hour"], out int hour))
        {
            newEvent.startTime = new DateTime(selectedDate.Year, selectedDate.Month, selectedDate.Day, hour, 0, 0);
            newEvent.endTime = newEvent.startTime.AddHours(1);
        }
    }
 *@
    private async Task CreateNewEvent()
    {
        try
        {
            newEvent.CalendarId = calendarId;
            await EventService.CreateEvent(newEvent);
            successMessage = "Event created successfully!";
            StateHasChanged();

            // Wait 2 seconds before redirecting
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating event: {ex.Message}";
            StateHasChanged();

        }
    }

    @* private async Task CreateNewEvent()
    {
        errorMessage = "";
        try
        {
            if (string.IsNullOrWhiteSpace(newEvent.title))
            {
                errorMessage = "Title is required.";
                return;
            }
            newEvent.ownerId = 1; // Placeholder
            var selectedTutor = Tutors.FirstOrDefault(t => t.id == selectedTutorId);
            if (selectedTutor != null)
            {
                newEvent.participants = new List<Student> {
new Student {
id = selectedTutor.id,
name = selectedTutor.name
}
};
            }
            var createdEvent = await EventService.CreateEvent(newEvent);
            NavigationManager.NavigateTo("/calendar");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating event: {ex.Message}";
        }
    } *@

    private void Cancel()
    {
        NavigationManager.NavigateTo("/calendar");
    }

    private string GetEventColor()
    {
        var colors = new[] {
"#3788d8", "#28a745", "#dc3545", "#ffc107",
"#17a2b8", "#6c757d", "#343a40"
};
        return colors[Math.Abs(newEvent.Id) % colors.Length];
    }
}
<style>
    .event-item {
        width: 100%;
        /* Ensure the box takes full width of the container */
        margin: 10px 0;
        /* Add vertical margin between events */
        padding: 10px;
        /* Increase padding for a cleaner look */
        border-radius: 10px;
        /* Rounded edges */
        background-color: #444;
        /* Ensure background color is consistent */
        color: white;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        /* Soft shadow */
        transition: transform 0.2s ease;
        box-sizing: border-box;
        /* Include padding and border in width calculation */
        position: relative;
        /* Avoid absolute positioning unless necessary */
    }

    .event-item:hover {
        transform: scale(1.02);
        z-index: 10;
    }

    .event-title {
        font-weight: bold;
        margin-bottom: 8px;
        /* Add spacing below the title */
    }

    .event-time {
        font-size: 0.9em;
        opacity: 0.8;
    }

    /* Container adjustments to avoid white lines */
    .event-creation-container,
    .event-list-container {
        padding: 20px;
        box-sizing: border-box;
    }

    /* Remove unwanted scrollbar overflow */
    body {
        margin: 0;
        padding: 0;
        overflow-x: hidden;
    }

    /* Responsive Adjustments */
    @@media (max-width: 768px) {
        .event-item {
            padding: 8px;
            margin: 8px 0;
        }

        .event-title {
            font-size: 1em;
        }
    }
</style>
