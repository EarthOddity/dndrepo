@page "/calendar/{calendarId:int}/event"
@inject NavigationManager NavigationManager
@inject ICalendarService EventService
@rendermode InteractiveServer
<div>
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }
    <EditForm Model="@newEvent" OnValidSubmit="CreateNewEvent">
        <DataAnnotationsValidator />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }


        <div class="event-creation-container">
            <h2>Create A New Event</h2>

            <div class="form-group">
                <label>Title</label>
                <InputText @bind-Value="newEvent.title" class="form-control" />
                <ValidationMessage For="@(() => newEvent.title)" />
            </div>

            <div class="form-group">
                <label>Description</label>
                <InputTextArea @bind-Value="newEvent.description" class="form-control" />
            </div>

            <div class="form-group">
                <label>Start Time</label>
                <InputDate TValue="DateTime" @bind-Value="newEvent.startTime" class="form-control" />
                <ValidationMessage For="@(() => newEvent.startTime)" />
            </div>

            <div class="form-group">
                <label>End Time</label>
                <InputDate TValue="DateTime" @bind-Value="newEvent.endTime" class="form-control" />
                <ValidationMessage For="@(() => newEvent.endTime)" />
            </div>

            @* still need to incorporate adding a tutor *@

            <div class="form-actions">
                <button type="submit" class="btn btn-primary">Create Event</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </EditForm>

    <div class="event-item" style="background-color: @GetEventColor()">
        <div class="event-title">@newEvent.title</div>
        <div class="event-time">
            @newEvent.startTime.ToString("HH:mm") - @newEvent.endTime.ToString("HH:mm")
        </div>
    </div>



</div>


@code {
    [Parameter] public int calendarId { get; set; }
    private SBEvent newEvent = new SBEvent();
    private int selectedTutorId;
    private string errorMessage = "";
    private List<Student> Tutors = new();
    private string successMessage = string.Empty;


    @*     protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (DateTime.TryParse(query["date"], out DateTime selectedDate) &&
        int.TryParse(query["hour"], out int hour))
        {
            newEvent.startTime = new DateTime(selectedDate.Year, selectedDate.Month, selectedDate.Day, hour, 0, 0);
            newEvent.endTime = newEvent.startTime.AddHours(1);
        }
    }
 *@
    private async Task CreateNewEvent()
    {
        try
        {
            newEvent.calendarId = calendarId;
            await EventService.CreateEvent(newEvent);
            successMessage = "Event created successfully!";
            StateHasChanged();

            // Wait 2 seconds before redirecting
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating event: {ex.Message}";
            StateHasChanged();

        }
    }

    @* private async Task CreateNewEvent()
    {
        errorMessage = "";
        try
        {
            if (string.IsNullOrWhiteSpace(newEvent.title))
            {
                errorMessage = "Title is required.";
                return;
            }
            newEvent.ownerId = 1; // Placeholder
            var selectedTutor = Tutors.FirstOrDefault(t => t.id == selectedTutorId);
            if (selectedTutor != null)
            {
                newEvent.participants = new List<Student> {
new Student {
id = selectedTutor.id,
name = selectedTutor.name
}
};
            }
            var createdEvent = await EventService.CreateEvent(newEvent);
            NavigationManager.NavigateTo("/calendar");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating event: {ex.Message}";
        }
    } *@

    private void Cancel()
    {
        NavigationManager.NavigateTo("/calendar");
    }

    private string GetEventColor()
    {
        var colors = new[] {
"#3788d8", "#28a745", "#dc3545", "#ffc107",
"#17a2b8", "#6c757d", "#343a40"
};
        return colors[Math.Abs(newEvent.id) % colors.Length];
    }
}

<style>
    .event-item {
        position: absolute;
        width: calc(100% - 10px);
        left: 5px;
        margin-top: 2px;
        padding: 5px;
        border-radius: 4px;
        color: white;
        font-size: 0.8em;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
    }

    .event-item:hover {
        transform: scale(1.02);
        z-index: 10;
    }

    .event-title {
        font-weight: 600;
        margin-bottom: 2px;
    }

    .event-time {
        font-size: 0.7em;
        opacity: 0.9;
    }

    .week-grid::-webkit-scrollbar {
        width: 10px;
        height: 10px;
    }

    .week-grid::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .week-grid::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 5px;
    }

    .week-grid::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    .alert {
        margin-top: 1rem;
        padding: 1rem;
        border-radius: 0.25rem;
    }

    .alert-success {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }

    /* Responsive Adjustments */
    @* @media
    (max-width: 768px) {
        .week-calendar {
            font-size: 14px;
        }

        .time-labels {
            width: 50px;
        }

        .hour-label {
            padding-right: 10px;
        }
    } *@
</style>