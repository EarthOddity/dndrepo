@page "/subject-materials/{subjectId:int}"
@inject IAcademicService AcademicService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<h3>Materials for Subject</h3>

@if (error != null)
{
    <div class="alert alert-danger">@error</div>
}

@if (loading)
{
    <p>Loading materials...</p>
}
else if (materials == null || !materials.Any())
{
    <p>No materials found for this subject.</p>
}
else
{
    <div class="materials-list">
        @foreach (var material in materials)
        {
            <div class="material-item" @onclick="() => NavigateToMaterial(material.Id)">
                <div class="material-content">
                    <h4>@material.Title</h4>
                    <p>@material.Description</p>
                </div>
                <button class="heart-button @(savedMaterialIds.Contains(material.Id) ? "saved" : "")"
                        @onclick="() => ToggleSave(material.Id)">
                    <i class="fas fa-heart"></i>
                </button>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public int subjectId { get; set; }

    private List<TeachingMaterial> materials;
    private HashSet<int> savedMaterialIds = new();
    private int? currentUserId;
    private bool loading = true;
    private string error;

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            var authState = await AuthState;
            var user = authState.User;

            if (!user.Identity?.IsAuthenticated ?? false)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            var idClaim = user.Claims.FirstOrDefault(c => c.Type == "id");
            if (idClaim == null || !int.TryParse(idClaim.Value, out int userId))
            {
                error = "User ID not found";
                return;
            }

            currentUserId = userId;
            await LoadMaterials();
        }
        catch (Exception ex)
        {
            error = "Error loading materials";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadMaterials()
    {
        try
        {
            materials = (await AcademicService.GetMaterialsBySubjectId(subjectId)).ToList();
            var savedMaterials = await AcademicService.GetSavedMaterialsByUserId(currentUserId.Value);
            savedMaterialIds = new HashSet<int>(savedMaterials.Select(m => m.Id));
        }
        catch (Exception ex)
        {
            error = $"Error loading materials: {ex.Message}";
            materials = new List<TeachingMaterial>();
        }
    }

    private async Task ToggleSave(int materialId)
    {
        if (!currentUserId.HasValue)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            await AcademicService.ToggleSaveMaterial(currentUserId.Value, materialId);
            await LoadMaterials();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling save state: {ex.Message}");
        }
    }

    private void NavigateToMaterial(int materialId)
    {
        NavigationManager.NavigateTo($"/material/{materialId}");
    }
}

<style>
    .materials-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .material-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: #1e293b;
        color: #e2e8f0;
        cursor: pointer;
        transition: transform 0.2s ease;
    }

    .material-item:hover {
        transform: scale(1.02);
    }

    .material-content {
        flex-grow: 1;
    }

    .heart-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px;
        color: #888;
        transition: color 0.3s ease;
    }

    .heart-button.saved {
        color: #ff4444;
    }

    .heart-button:hover {
        transform: scale(1.1);
    }
</style>