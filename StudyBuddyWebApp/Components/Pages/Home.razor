@page "/"
@using StudyBuddyWebApp.Components
@using System.Security.Claims
@using StudyBuddyWebApp.Components.Layout
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@inject IAcademicService AcademicService
@inject ICalendarService eventService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer
@attribute [Authorize("MustBeStudent")]

<div class="study-buddy-container">
    <section class="introduction">
        <h2>Welcome to StudyBuddy!</h2>
        <p>Connect with your peers, discover study resources, and find the perfect tutor to help you excel in your
            academic journey!</p>
    </section>

    <main class="content-grid">
        <div class="events-section">
            <h3>Upcoming Events</h3>
            @if (events == null)
            {
                <p>Loading events...</p>
            }
            else if (!events.Any())
            {
                <p>No Upcoming events.</p>
            }
            else
            {
                <CalendarDay Events="events" CalendarId="calendarId" />
            }
            <div class="button-container">
                <button class="create-event-button" @onclick="CreateEvent">Create A New Event</button>
            </div>
        </div>

        <div class="materials-section">
            <OverviewMaterialsSaved Title="Saved Materials" Materials="@savedMaterials" SavingMethod="@ToggleSave"
                SavedMaterialIds="@savedMaterialIds" />
        </div>
    </main>
</div>

@code {
    private int id;
    private List<TeachingMaterial> savedMaterials = new();
    private HashSet<int> savedMaterialIds = new();
    private int? currentUserId;
    private List<SBEvent> events = new List<SBEvent>();
    private int calendarId;
    private bool loading = true;
    private string error;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        if (!isLoggedIn) return;
        userClaims = user.Claims;
        id = int.Parse(user.Claims.First(claim => claim.Type.Equals("id")).Value);
        calendarId = await eventService.GetCalendarIdByStudentId(id);
        Console.WriteLine("Calendar id" + calendarId);
        events = (await eventService.GetEventsByCalendarId(calendarId)).ToList();
        try
        {
            if (user.Identity?.IsAuthenticated ?? false)
            {
                var idClaim = user.Claims.FirstOrDefault(c => c.Type == "id");
                if (idClaim != null && int.TryParse(idClaim.Value, out int userId))
                {
                    currentUserId = userId;
                    await LoadSavedMaterials();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading saved materials: {ex.Message}");
        }
    }

    private async Task LoadSavedMaterials()
    {
        if (!currentUserId.HasValue) return;

        try
        {
            savedMaterials = (await AcademicService.GetSavedMaterialsByUserId(currentUserId.Value)).ToList();
            savedMaterialIds = new HashSet<int>(savedMaterials.Select(m => m.id));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading saved materials: {ex.Message}");
        }
    }

    private async Task ToggleSave(int materialId)
    {
        if (!currentUserId.HasValue) return;

        try
        {
            await AcademicService.ToggleSaveMaterial(currentUserId.Value, materialId);
            await LoadSavedMaterials();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling save state: {ex.Message}");
        }
    }

    private void CreateEvent()
    {
        NavigationManager.NavigateTo($"/calendar/{calendarId}/event");
    }



}

<style>
    .study-buddy-container {
        margin: 0 auto;
        padding: 20px;
        color: #e2e8f0;
    }

    .introduction {
        background-color: #1e293b;
        padding: 20px;
        border-radius: 8px;
        margin: 30px 0;
    }

    .content-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .events-section,
    .materials-section {
        background-color: #1e293b;
        padding: 20px;
        border-radius: 8px;
        min-height: fit-content;
        height: 800px;
    }

    .button-container {
        display: flex;
        justify-content: flex-end;
        width: 100%;
        padding: 10px;
    }

    .create-event-button {
        background: linear-gradient(135deg, #71b3e5 0%, #013faa 100%);
        color: #000000;
        border: none;
        text-align: center;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: background 0.3s ease, transform 0.2s ease;
    }

    .create-event-button:hover {
        background: linear-gradient(135deg, #53b5ff 0%, #002a74 100%);
        transform: scale(1.05);
    }
</style>