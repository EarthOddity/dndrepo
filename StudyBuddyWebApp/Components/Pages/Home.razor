@page "/"
@using StudyBuddyWebApp.Components
@inject ICalendarService eventService
@inject IAcademicService AcademicService
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<div class="study-buddy-container">
    <section class="introduction">
        <h2>Welcome to StudyBuddy!</h2>
        <p>Connect with your peers, discover study resources, and find the perfect tutor to help you excel in your
            academic journey!</p>
    </section>

    <main class="content-grid">
        <div class="events-section">
            <h3>Upcoming Events</h3>
            <CalendarDay Events="events"/>
        </div>
        <div class="materials-section">
            <OverviewMaterialsSaved Title="Saved Materials" Materials="@savedMaterials" SavingMethod="@ToggleSave"
                SavedMaterialIds="@savedMaterialIds" />
        </div>
    </main>
</div>

@code {
    private List<TeachingMaterial> savedMaterials = new();
    private HashSet<int> savedMaterialIds = new();
    private int? currentUserId;
    private bool loading = true;
    private string error;
    private List<SBEvent> events = new List<SBEvent>();

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthState;
            var user = authState.User;
            events = (await eventService.GetEventsByCalendarId(1)).ToList();


            if (user.Identity?.IsAuthenticated ?? false)
            {
                var idClaim = user.Claims.FirstOrDefault(c => c.Type == "id");
                if (idClaim != null && int.TryParse(idClaim.Value, out int userId))
                {
                    currentUserId = userId;
                    await LoadSavedMaterials();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading saved materials: {ex.Message}");
        }
    }

    private async Task LoadSavedMaterials()
    {
        if (!currentUserId.HasValue) return;

        try
        {
            savedMaterials = (await AcademicService.GetSavedMaterialsByUserId(currentUserId.Value)).ToList();
            savedMaterialIds = new HashSet<int>(savedMaterials.Select(m => m.id));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading saved materials: {ex.Message}");
        }
    }

    private async Task ToggleSave(int materialId)
    {
        if (!currentUserId.HasValue) return;

        try
        {
            await AcademicService.ToggleSaveMaterial(currentUserId.Value, materialId);
            await LoadSavedMaterials();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling save state: {ex.Message}");
        }
    }
}

<style>
    .study-buddy-container {
        margin: 0 auto;
        padding: 20px;
        color: #e2e8f0;
    }

    .introduction {
        background-color: #1e293b;
        padding: 20px;
        border-radius: 8px;
        margin: 30px 0;
    }

    .content-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .events-section,
    .materials-section {
        background-color: #1e293b;
        padding: 20px;
        border-radius: 8px;
        min-height: fit-content;
        height: 800px;
    }
</style>