@page "/material/{id:int}"
@inject ITeachingMaterialService TeachingMaterialService
@inject ISubjectService SubjectService
@inject IReviewService ReviewService

<h3>Teaching Material Details</h3>

@if (teachingMaterial == null)
{
    <p>Loading...</p>
}
else
{
    <div class="material-header">
        <div class="material-info">
            <h4>@teachingMaterial.title</h4>
            <p>@teachingMaterial.description</p>
            <p><strong>Author:</strong> @teachingMaterial.author.name</p>
            <p><strong>Approved:</strong> @(teachingMaterial.isApproved ? "Yes" : "No")</p>
        </div>
        <button class="heart-button @(isSaved ? "saved" : "")" @onclick="ToggleSave">
            <i class="fas fa-heart"></i>
        </button>
    </div>

    @if (subject != null)
    {
        <div>
            <h4>Subject</h4>
            <p>@subject.name</p>
        </div>
    }

    @if (reviews?.Any() == true)
    {
        <div>
            <h4>Reviews</h4>
            @foreach (var review in reviews)
            {
                <div>
                    <p><strong>@review.author.name:</strong> @review.reviewText</p>
                    <p><strong>Approved:</strong> @(review.isApproved ? "Yes" : "No")</p>
                </div>
            }
        </div>
    }
    else
    {
        <p>No reviews available.</p>
    }
}

@code {
    [Parameter]
    public int id { get; set; }

    private TeachingMaterial teachingMaterial;
    private Subject subject;
    private IEnumerable<global::Review> reviews;
    private readonly int currentUserId = 1; // For future: Get actual user ID
    private bool isSaved;


    protected override async Task OnInitializedAsync()
    {
        teachingMaterial = await TeachingMaterialService.GetMaterialById(id);
        if (teachingMaterial != null)
        {
            subject = await SubjectService.GetSubjectById(teachingMaterial.id);
            reviews = await ReviewService.GetReviewsByMaterialId(teachingMaterial.id);
            var savedMaterials = await TeachingMaterialService.GetSavedMaterialsByUserId(currentUserId);
            isSaved = savedMaterials.Any(m => m.id == id);
        }

    }
    private async Task ToggleSave()
    {
        var success = await TeachingMaterialService.ToggleSaveMaterial(currentUserId, id);
        if (success)
        {
            isSaved = !isSaved;
            StateHasChanged();
        }
    }
}

<style>
    .material-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 2rem;
    }

    .material-info {
        flex-grow: 1;
    }

    .heart-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px;
        color: #888;
        transition: color 0.3s ease;
    }

    .heart-button.saved {
        color: #ff4444;
    }

    .heart-button:hover {
        transform: scale(1.1);
    }
</style>