@page "/material/{id:int}"
@inject IAcademicService AcademicService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<h3>Teaching Material Details</h3>

@if (error != null)
{
    <div class="alert alert-danger">@error</div>
}

@if (teachingMaterial != null)
{
    <div class="material-header">
        <div class="material-info">
            <h4>@teachingMaterial.title</h4>
            <p>@teachingMaterial.description</p>
            <p><strong>Author:</strong> @teachingMaterial.author?.name</p>
            <p><strong>Approved:</strong> @(teachingMaterial.isApproved ? "Yes" : "No")</p>
        </div>
        <button class="heart-button @(isSaved ? "saved" : "")" @onclick="ToggleSave">
            <i class="@(isSaved ? "fas" : "far") fa-heart"></i>
        </button>
    </div>

    @if (subject != null)
    {
        <div>
            <h4>Subject</h4>
            <p>@subject.name</p>
        </div>
    }

    <div class="reviews-section">
        @if (currentUserId.HasValue)
        {
            <ReviewsPosted MaterialId="@id" CurrentUserId="@currentUserId.Value" />
        }

        <h4>All Reviews</h4>
        @if (reviews?.Any() == true)
        {
            @foreach (var review in reviews.Where(r => !currentUserId.HasValue || r.authorId != currentUserId.Value))
            {
                <div class="review-item">
                    <p><strong>@review.author?.name:</strong> @review.reviewText</p>
                    <p><strong>Approved:</strong> @(review.isApproved ? "Yes" : "No")</p>
                </div>
            }
        }
        else
        {
            <p>No other reviews available.</p>
        }
    </div>
}
else if (loading)
{
    <p>Loading...</p>
}
else
{
    <p>Material not found</p>
}

@code {
    [Parameter]
    public int id { get; set; }

    private TeachingMaterial teachingMaterial;
    private Subject subject;
    private IEnumerable<Review> reviews;
    private int? currentUserId;
    private bool isSaved;
    private bool loading = true;
    private string error;

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            var authState = await AuthState;
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                var idClaim = user.Claims.FirstOrDefault(c => c.Type == "id");
                if (idClaim != null && int.TryParse(idClaim.Value, out int userId))
                {
                    currentUserId = userId;
                }
            }

            teachingMaterial = await AcademicService.GetMaterialById(id);
            if (teachingMaterial != null)
            {
                await Task.WhenAll(
                LoadSubject(),
                LoadReviews(),
                LoadSavedStatus()
                );
            }
        }
        catch (Exception ex)
        {
            error = "Error loading material details";
            Console.WriteLine($"Error loading material: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadSubject()
    {
        if (teachingMaterial?.subjectId > 0)
        {
            subject = await AcademicService.GetSubjectById(teachingMaterial.subjectId);
        }
    }

    private async Task LoadReviews()
    {
        reviews = await AcademicService.GetReviewsByMaterialId(teachingMaterial.id);
    }

    private async Task LoadSavedStatus()
    {
        if (currentUserId.HasValue)
        {
            var savedMaterials = await AcademicService.GetSavedMaterialsByUserId(currentUserId.Value);
            isSaved = savedMaterials.Any(m => m.id == id);
        }
    }

    private async Task ToggleSave()
    {
        if (!currentUserId.HasValue)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            await AcademicService.ToggleSaveMaterial(currentUserId.Value, id);
            isSaved = !isSaved;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            error = "Error saving material";
            Console.WriteLine($"Error toggling save state: {ex.Message}");
        }
    }
}

<style>
    .material-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 2rem;
    }

    .material-info {
        flex-grow: 1;
    }

    .heart-container {
        display: flex;
        align-items: center;
        margin-left: 15px;
    }

    .heart-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .heart-button i {
        font-size: 1.5rem;
        color: #888;
        transition: all 0.3s ease;
    }

    .heart-button.saved i {
        color: #ff4444;
    }

    .heart-button:hover i {
        transform: scale(1.1);
    }
</style>