@page "/material/{id:int}"
@inject IAcademicService AcademicService

<h3>Teaching Material Details</h3>

@if (teachingMaterial != null)
{
    <div class="material-header">
        <div class="material-info">
            <h4>@teachingMaterial.title</h4>
            <p>@teachingMaterial.description</p>
            <p><strong>Author:</strong> @teachingMaterial.author?.name</p>
            <p><strong>Approved:</strong> @(teachingMaterial.isApproved ? "Yes" : "No")</p>
        </div>
        <button class="heart-button @(isSaved ? "saved" : "")" @onclick="ToggleSave">
            <i class="@(isSaved ? "fas" : "far") fa-heart"></i>
        </button>
    </div>

    @if (subject != null)
    {
        <div>
            <h4>Subject</h4>
            <p>@subject.name</p>
        </div>
    }

    <div class="reviews-section">
        <ReviewsPosted MaterialId="@id" CurrentUserId="@currentUserId" />

        <h4>All Reviews</h4>
        @if (reviews?.Any() == true)
        {
            @foreach (var review in reviews.Where(r => r.authorId != currentUserId))
            {
                <div class="review-item">
                    <p><strong>@review.author?.name:</strong> @review.reviewText</p>
                    <p><strong>Approved:</strong> @(review.isApproved ? "Yes" : "No")</p>
                </div>
            }
        }
        else
        {
            <p>No other reviews available.</p>
        }

    </div>
}
else
{
    <p>Loading...</p>

}

@code {
    [Parameter]
    public int id { get; set; }

    private TeachingMaterial teachingMaterial { get; set; }
    private Subject subject { get; set; }
    private IEnumerable<global::Review> reviews;
    private readonly int currentUserId = 1; // For future: Get actual user ID
    private bool isSaved;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            teachingMaterial = await AcademicService.GetMaterialById(id);
            if (teachingMaterial != null)
            {
                subject = await AcademicService.GetSubjectById(teachingMaterial.id);
                reviews = await AcademicService.GetReviewsByMaterialId(teachingMaterial.id);
                var savedMaterials = await AcademicService.GetSavedMaterialsByUserId(1); // Replace with actual user ID
                isSaved = savedMaterials.Any(m => m.id == id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading material: {ex.Message}");
        }

    }
    private async Task ToggleSave()
    {
        try
        {
            await AcademicService.ToggleSaveMaterial(currentUserId, id);
            isSaved = !isSaved;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling save state: {ex.Message}");
        }
    }
}

<style>
    .material-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 2rem;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .material-info h4 {
        font-size: 1.5rem;
        color: #333;
        margin-bottom: 10px;
    }

    .material-info p {
        font-size: 1rem;
        color: #555;
        margin: 5px 0;
    }

    .heart-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 10px;
    }

    .heart-button i {
        font-size: 1.8rem;
        color: #ccc;
        transition: color 0.3s ease;
    }

    .heart-button.saved i {
        color: #ff4444;
    }

    .heart-button:hover i {
        color: #ff6666;
        transform: scale(1.1);
    }
</style>
