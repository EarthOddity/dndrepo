@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IAcademicService AcademicService

<div class="search-container">
    <div class="search-input">
        <input @bind="searchTerm" @bind:event="oninput" @onkeyup="@HandleKeyPress"
            placeholder="Search materials by title, subject, or author..." />
        <button class="search-button" @onclick="Search" title="Search">
            <i class="fas fa-search"></i>
            <span class="button-text">Search</span>
        </button>
        <button class="clear-button" @onclick="Clear" title="Clear">
            <i class="fas fa-times"></i>
            <span class="button-text">Clear</span>
        </button>
    </div>

    @if (isLoading)
    {
        <div class="loading">Searching...</div>
    }

    @if (materials?.Any() == true)
    {
        <div class="results-container">
            <div class="result-section">
                <h4>Teaching Materials</h4>
                @foreach (var material in materials)
                {
                    <div class="result-item" @onclick="() => NavigateToMaterial(material.id)">
                        <div class="result-content">
                            <div class="result-title">
                                <i class="fas fa-book"></i>
                                <span>@material.title</span>
                            </div>
                            <div class="result-details">
                                @if (material.subject != null)
                                {
                                    <span class="badge subject-badge">@material.subject.name</span>
                                }
                                @if (material.author != null)
                                {
                                    <span class="badge author-badge">@material.author.name</span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private string searchTerm;
    private bool isLoading;
    private List<TeachingMaterial> materials;

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }

    private async Task Search()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            Clear();
            return;
        }

        isLoading = true;
        try
        {
            materials = (await AcademicService.SearchMaterials(searchTerm))?.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Search error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void Clear()
    {
        searchTerm = string.Empty;
        materials = null;
    }

    private void NavigateToMaterial(int id) => NavigationManager.NavigateTo($"/material/{id}");
}

<style>
    .search-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 20px;
    }

    .search-input {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .search-input input {
        padding: 10px 15px;
        border-radius: 20px;
        border: 1px solid #ccc;
        outline: none;
        width: 300px;
        transition: border-color 0.3s ease;
    }

    .search-input input:focus {
        border-color: #3182ce;
    }

    .search-button,
    .clear-button {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 16px;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .search-button {
        background: linear-gradient(135deg, #71b3e5 0%, #013faa 100%);
        color: white;
    }

    .clear-button {
        background-color: #6c757d;
        color: white;
    }

    .search-button:hover {
        background: linear-gradient(135deg, #53b5ff 0%, #002a74 100%);
        transform: scale(1.05);
    }

    .clear-button:hover {
        background-color: #5a6268;
    }

    .button-text {
        font-size: 14px;
    }

    .results-container {
        margin-top: 20px;
        width: 100%;
        max-width: 600px;
    }

    .result-section {
        background-color: #1e293b;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .result-item {
        background-color: #0f172a;
        padding: 10px;
        border-radius: 6px;
        margin-bottom: 10px;
        cursor: pointer;
        transition: transform 0.2s ease;
    }

    .result-item:hover {
        transform: scale(1.02);
    }

    .result-content {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .result-title {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .result-details {
        display: flex;
        gap: 8px;
        margin-left: 24px;
    }

    .badge {
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
    }

    .subject-badge {
        background-color: #4a90e2;
        color: white;
    }

    .author-badge {
        background-color: #50b07e;
        color: white;
    }
</style>