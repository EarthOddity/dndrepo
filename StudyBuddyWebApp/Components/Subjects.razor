@inject IAcademicService AcademicService

<div class="px-4">
    @if (subjects == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="container-fluid px-0">
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card mt-4 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title mb-3">@(editingsubject != null ? "Edit Subject" : "Add New Subject")</h5>
                            <EditForm Model="subjectForm" OnValidSubmit="Savesubject">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" />
                                <div class="mb-3">
                                    <label class="form-label">Name</label>
                                    <InputText @bind-Value="subjectForm.Name" class="form-control" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <InputTextArea @bind-Value="subjectForm.Description" class="form-control" rows="3" />
                                </div>
                                <div class="d-flex gap-2">
                                    <button type="submit" class="btn btn-primary">Save</button>
                                    @if (editingsubject != null)
                                    {
                                        <button type="button" class="btn btn-outline-secondary"
                                            @onclick="CancelEdit">Cancel</button>
                                    }
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row g-4">
                @foreach (var subject in subjects)
                {
                    <div class="col-md-6">
                        <div class="card h-100 shadow-sm @(SelectedBachelor != null ? "cursor-pointer" : "")"
                            style="@(bachelorSubjects?.Any(s => s.Id == subject.Id) == true ? "opacity: 0.6;" : "")"
                            @onclick="() => OnSubjectClick(subject)">
                            <div class="card-body">
                                <h5 class="card-title text-primary mb-3">@subject.Name</h5>
                                @if (SelectedBachelor == null)
                                {
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => Editsubject(subject)">
                                            <i class="bi bi-pencil"></i> Edit
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => Deletesubject(subject.Id)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </div>
                                }
                                else if (bachelorSubjects?.Any(s => s.Id == subject.Id) == true)
                                {
                                    <span class="badge bg-success">Associated</span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>


    }
</div>

@code {
    [Parameter]
    public Bachelor? SelectedBachelor { get; set; }
    [Parameter]
    public EventCallback<Subject> OnSubjectSelected { get; set; }
    private List<Subject>? subjects;
    private Subject subjectForm = new();
    private Subject? editingsubject;
    private List<Subject>? bachelorSubjects;
    protected override async Task OnInitializedAsync()
    {
        await Loadsubjects();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedBachelor != null)
        {
            bachelorSubjects = (await AcademicService.GetSubjectsByBachelorId(SelectedBachelor.Id)).ToList();
        }
        else
        {
            bachelorSubjects = null;
        }
    }

    private async Task Loadsubjects()
    {
        subjects = (await AcademicService.GetAllSubjects()).ToList();

    }
    private void Editsubject(Subject subject)
    {
        editingsubject = subject;
        subjectForm = new Subject
            {
                Id = subject.Id,
                Name = subject.Name,
                Description = subject.Description,
            };
    }
    private async Task Savesubject()
    {
        if (editingsubject != null)
        {
            await AcademicService.UpdateSubject(subjectForm);
        }
        else
        {
            await AcademicService.AddSubject(subjectForm);
        }

        await Loadsubjects();
        ResetForm();
    }

    private async Task Deletesubject(int id)
    {
        await AcademicService.DeleteSubject(id);
        await Loadsubjects(); // Reload list
    }
    private void CancelEdit()
    {
        ResetForm();
    }

    private void ResetForm()
    {
        subjectForm = new Subject(); // Clear form
        editingsubject = null;
    }

    private async Task OnSubjectClick(Subject subject)
    {
        if (SelectedBachelor != null)
        {
            await OnSubjectSelected.InvokeAsync(subject);
        }
    }

}

<style>
    .hover-shadow:hover {
        box-shadow: 0 .5rem 1rem rgba(0, 0, 0, .15) !important;
        transition: box-shadow .3s ease-in-out;
    }

    .cursor-pointer {
        cursor: pointer;
    }

    .cursor-pointer:hover {
        background-color: #f8f9fa;
    }

    .card-body {
        color: black;
    }
</style>