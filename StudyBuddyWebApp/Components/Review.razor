@page "/leave-review"
@inject AcademicService academicService

@using StudyBuddyAPI.Models  <!-- Import the correct namespace for the Review model -->

<h3>Leave a Review</h3>

@if (isSubmitted)
{
    <p>Thank you for your review!</p>
}
else
{
    <form @onsubmit="HandleSubmit">
        <textarea @bind="reviewText" rows="4" cols="50" placeholder="Write your review here..."></textarea><br />
        <button type="submit">Submit Review</button>
        <button type="button" @onclick="HandleUpdate">Update Review</button>
        <button type="button" @onclick="HandleDelete">Delete Review</button>
    </form>
}

@code {
    private string reviewText = "";  // Review text from the user input
    private bool isSubmitted = false;  // Flag to indicate submission status
    private int reviewId = 1;  // Example review ID; set this dynamically
    private int materialId = 1;  // Example material ID; replace with actual material ID
    private bool isApproved = false;  // Example review approval status; adjust as needed

    private async Task HandleSubmit()
    {
        // Create a new Review object to be submitted (correct type with lowercase property names)
        var newReview = new Review
        {
            reviewText = reviewText,    // Review text from the input
            isApproved = isApproved,    // Assuming review approval is controlled via the logic
            materialId = materialId     // Assign the correct materialId for the review
        };

        // Call AddReview method from AcademicService to save the new review
        await academicService.AddReview(newReview);
        isSubmitted = true;  // Set isSubmitted flag to true to show thank you message
    }

    private async Task HandleUpdate()
    {
        // Update the review with the current review ID (with lowercase property names)
        var updatedReview = new Review
        {
            id = reviewId,              // Use the current review ID
            reviewText = reviewText,    // Updated review text from input
            isApproved = isApproved,    // Review approval status
            materialId = materialId     // Material ID for the review
        };

        // Call UpdateReview method from AcademicService
        bool success = await academicService.UpdateReview(reviewId, reviewText, isApproved);
        if (success)
        {
            isSubmitted = true; // Indicate review has been updated successfully
        }
    }

    private async Task HandleDelete()
    {
        // Call DeleteReview method from AcademicService to delete the review by ID
        bool success = await academicService.DeleteReview(reviewId);
        if (success)
        {
            reviewText = "";        // Clear the review text
            isSubmitted = true;     // Indicate the review has been deleted
        }
    }
}
