@inject IAcademicService AcademicService



<div class="px-4">
    @if (bachelors == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="container-fluid px-0">
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card mt-4 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title mb-3">@(editingBachelor != null ? "Edit Bachelor" : "Add New Bachelor")
                            </h5>
                            <EditForm Model="bachelorForm" OnValidSubmit="SaveBachelor">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" />
                                <div class="mb-3">
                                    <label class="form-label">Program Name</label>
                                    <InputText @bind-Value="bachelorForm.ProgramName" class="form-control" />
                                </div>
                                <div class="d-flex gap-2">
                                    <button type="submit" class="btn btn-primary">Save</button>
                                    @if (editingBachelor != null)
                                    {
                                        <button type="button" class="btn btn-outline-secondary"
                                            @onclick="CancelEdit">Cancel</button>
                                    }
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row g-4">
                @foreach (var bachelor in bachelors)
                {
                    <div class="col-md-6">
                        <div class="card h-100 shadow-sm hover-shadow">
                            <div class="card-body">
                                <h5 class="card-title text-primary mb-3">@bachelor.ProgramName</h5>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-primary btn-sm" @onclick="() => EditBachelor(bachelor)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteBachelor(bachelor.Id)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                    <button class="btn btn-primary btn-sm ms-auto"
                                        @onclick="() => OnBachelorSelected.InvokeAsync(bachelor)">
                                        <i class="bi bi-plus-circle"></i> Select Subjects
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

        </div>
    }
</div>


@code {

    [Parameter]
    public EventCallback<Bachelor> OnBachelorSelected { get; set; }
    private List<Bachelor>? bachelors;
    private Bachelor bachelorForm = new();
    private Bachelor? editingBachelor;

    protected override async Task OnInitializedAsync()
    {
        await LoadBachelors();
    }

    private async Task LoadBachelors()
    {
        bachelors = (await AcademicService.GetAllBachelors()).ToList();
    }
    private void EditBachelor(Bachelor bachelor)
    {
        editingBachelor = bachelor;
        bachelorForm = new Bachelor
            {
                Id = bachelor.Id,
                ProgramName = bachelor.ProgramName,
            };
    }
    private async Task SaveBachelor()
    {
        if (editingBachelor != null)
        {
            await AcademicService.UpdateBachelor(editingBachelor.Id, bachelorForm);
        }
        else
        {
            await AcademicService.CreateBachelor(bachelorForm);
        }

        await LoadBachelors();
        ResetForm();
    }

    private async Task DeleteBachelor(int id)
    {
        await AcademicService.DeleteBachelor(id);
        await LoadBachelors(); // Reload list
    }
    private void CancelEdit()
    {
        ResetForm();
    }

    private void ResetForm()
    {
        bachelorForm = new Bachelor(); // Clear form
        editingBachelor = null;
    }
}

<style>
    .card-body {
        color: black;
    }

    .hover-shadow:hover {
        box-shadow: 0 .5rem 1rem rgba(0, 0, 0, .15) !important;
        transition: box-shadow .3s ease-in-out;
    }

    .cursor-pointer {
        cursor: pointer;
    }

    .cursor-pointer:hover {
        background-color: #f8f9fa;
    }
</style>