@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICalendarService CalendarService
@using System.Globalization

<div class="calendar-day">
    <div class="day-header">
        @Day.ToString("ddd dd", CultureInfo.CurrentCulture)
    </div>
    <div class="day-slots">
        @for (int hour = 0; hour < 24; hour++)
        {
            var hourEvents = Events.Where(e => e.StartTime.Hour == hour).OrderBy(e => e.StartTime).ToList();
            <div class="hour-slot @(hourEvents.Any() ? "has-events" : "")" data-hour="@(hour.ToString("00")):00">
                <div class="hour-label">@(hour.ToString("00")):00</div>
                @foreach (var evt in hourEvents)
                {
                    <EventSummary Event="evt" OnEventEdit="OnEventEdit" />
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public DateTime Day { get; set; }
    [Parameter] public List<SBEvent> Events { get; set; } = [];
    [Parameter] public EventCallback<int> OnEventEdit { get; set; }

    private void EditEvent(int eventId)
    {
        OnEventEdit.InvokeAsync(eventId);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            int userId = int.Parse(user.Claims.First(claim => claim.Type.Equals("id")).Value);
            var userCalendar = await CalendarService.GetCalendarByUserId(userId);
            Events = userCalendar?.EventList ?? new List<SBEvent>();
        }
        else
        {
            Events = new List<SBEvent>();
        }
    }
}

<style>
    .calendar-day {
        min-width: 180px;
        flex-grow: 1;
        border-right: 1px solid #e0e6ed;
        position: relative;
        background-color: #ffffff;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }

    .day-header {
        background-color: #3182ce;
        color: white;
        padding: 12px;
        text-align: center;
        font-weight: 600;
        letter-spacing: 0.5px;
        text-transform: uppercase;
        font-size: 0.9em;
    }

    .day-slots {
        position: relative;
        height: calc(100vh - 60px);
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: #cbd5e0 #e2e8f0;
    }

    .day-slots::-webkit-scrollbar {
        width: 8px;
    }

    .day-slots::-webkit-scrollbar-track {
        background: #e2e8f0;
    }

    .day-slots::-webkit-scrollbar-thumb {
        background-color: #cbd5e0;
        border-radius: 4px;
    }

    .hour-slot {
        height: 60px;
        border-bottom: 1px solid #edf2f7;
        position: relative;
        transition: background-color 0.2s ease;
    }

    .hour-slot:hover {
        background-color: rgba(45, 55, 72, 0.05);
        cursor: pointer;
    }

    .hour-slot::before {
        content: attr(data-hour);
        position: absolute;
        left: -60px;
        top: -10px;
        color: #718096;
        font-size: 0.7em;
        opacity: 0.7;
    }

    .hour-label {
        position: absolute;
        left: -50px;
        top: -10px;
        color: #4a5568;
        font-size: 0.8em;
        font-weight: 500;
    }

    .has-events {
        background-color: #f0f9ff;
    }
</style>